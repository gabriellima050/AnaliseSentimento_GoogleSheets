//Insira a API do Groq abaixo

const GROQ_API_KEY = '';

// Cria o menu personalizado quando o Google Sheets √© aberto.
function onOpen() {
  SpreadsheetApp.getUi()
    .createMenu('‚úâÔ∏è Analisar Sentimentos')
    .addItem('Iniciar An√°lise', 'analisarSentimentos')
    .addToUi();
}

function analisarSentimentos() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  const dados = sheet.getDataRange().getValues();
  const header = dados[0];

  // Coluna de entrada esperada -- Ajuste de acordo com a sua coluna
  const colIndexTexto = header.indexOf("Resposta do Cliente");
  if (colIndexTexto === -1) {
    SpreadsheetApp.getUi().alert("‚ö†Ô∏è Coluna 'Resposta do Cliente' n√£o encontrada.");
    return;
  }

  // Criar colunas de an√°lise, se n√£o existirem
  const colunasIA = ["Sentimento", "Confian√ßa", "Categoria", "Emo√ß√£o", "Palavras-chave"];
  colunasIA.forEach(coluna => {
    if (!header.includes(coluna)) {
      sheet.getRange(1, header.length + 1).setValue(coluna);
      header.push(coluna);
    }
  });

  const novaColunaInicio = header.indexOf("Sentimento");

  let positivos = 0;
  let negativos = 0;
  let neutros = 0;

  for (let i = 1; i < dados.length; i++) {
    const resposta = dados[i][colIndexTexto];
    if (!resposta || resposta.trim() === "") continue;

// Ajuste o prompt abaixo para o seu neg√≥cio
    const prompt = `
Voc√™ √© um analisador de sentimentos. Analise o seguinte feedback de cliente e retorne os resultados diretamente, sem explica√ß√µes ou introdu√ß√µes. 

Formato da resposta: 
sentimento|confian√ßa|categoria|emo√ß√£o|palavra1,palavra2,...

Exemplo de sa√≠da correta: 
positivo|0.92|elogio|alegria|r√°pido,atendimento,√≥timo

Agora analise o seguinte feedback: """${resposta}"""

Formato de resposta: sentimento|confian√ßa|categoria|emo√ß√£o|palavra1,palavra2,...
`;

    const resultado = chamarIA(prompt);

    if (!resultado || resultado.split("|").length < 5) {
      sheet.getRange(i + 1, novaColunaInicio + 1, 1, 5).setValues([["neutro", "", "n√£o identificado", "neutro", ""]]);
      neutros++;
      continue;
    }

    const [sentimento, confianca, categoria, emocao, palavras] = resultado.split("|").map(s => s.trim());

    sheet.getRange(i + 1, novaColunaInicio + 1, 1, 5).setValues([[sentimento, confianca, categoria, emocao, palavras]]);

    if (sentimento.toLowerCase() === "positivo") positivos++;
    else if (sentimento.toLowerCase() === "negativo") negativos++;
    else neutros++;
  }

  // Exibir big numbers ao final
  const total = positivos + negativos + neutros;
  const resumoSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Resumo Sentimentos") || 
                      SpreadsheetApp.getActiveSpreadsheet().insertSheet("Resumo Sentimentos");

  resumoSheet.clear();
  resumoSheet.getRange("A1:B5").setValues([
    ["üìä Total de Feedbacks", total],
    ["‚úÖ Positivos", positivos],
    ["‚ö†Ô∏è Negativos", negativos],
    ["‚ûñ Neutros", neutros],
    ["üíö Taxa de Satisfa√ß√£o", total ? `${((positivos / total) * 100).toFixed(1)}%` : "0%"]
  ]);

  SpreadsheetApp.getUi().alert("‚úÖ An√°lise de sentimentos conclu√≠da com sucesso!");
}

function chamarIA(prompt) {
  const response = UrlFetchApp.fetch("https://api.groq.com/openai/v1/chat/completions", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      Authorization: `Bearer ${GROQ_API_KEY}`
    },
    payload: JSON.stringify({
      model: "llama3-8b-8192",
      messages: [{ role: "user", content: prompt }],
      temperature: 0.1,
      max_tokens: 200
    }),
    muteHttpExceptions: true,
  });

  const result = JSON.parse(response.getContentText());
  try {
    return result.choices[0].message.content.trim();
  } catch (e) {
    Logger.log("Erro de resposta da IA: " + JSON.stringify(result));
    return null;
  }
}
